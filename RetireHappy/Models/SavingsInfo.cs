//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RetireHappy.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;

    public partial class SavingsInfo
    {
        public int Id { get; set; }

        [Display(Name = "Estimate Monthly Savings Required")]
        public Nullable<double> calcRetSavings { get; set; }

        [Display(Name = "Risk Level")]
        public string riskLevel { get; set; }

        [Display(Name = "Expenditure (%)")]
        public Nullable<double> expPercent { get; set; }

        [Display(Name = "Shortfall (%)")]
        public Nullable<double> diffPercent { get; set; }

        public virtual UserProfile UserProfile { get; set; }

        public double calculate(int expRetAge, int currentAge, double desiredMonRetInc, double inflationRate, int retDuration)
        {
            double annualInfSum = 0;
            int limit = expRetAge + retDuration;
            // calculate annual inflation adjusted avg expenditure
            for (int i = expRetAge; i <= limit; i++)
            {
                int diffInAge = i - currentAge;
                // to find total expenditure needed
                annualInfSum += ((double)(desiredMonRetInc * Math.Pow(inflationRate, diffInAge)) * 12);
            }

            // calculate PV as of retirement age assuming interest rate is 1% annually
            double pvAsOfRetAge = (double)(annualInfSum / Math.Pow((1 + 0.01), retDuration));

            // calculate PV as of current age
            double pvAsOfCurAge = (double)(pvAsOfRetAge / Math.Pow((1 + 0.01), (expRetAge - currentAge)));

            // calculate monthly savings using PV as of current age
            double calcRetSavings = pvAsOfCurAge / ((expRetAge - currentAge) * 12);

            return calcRetSavings;
        }
        public double computeRiskLevel(double calcRetSavings, double curSavingAmt)
        {
            // to calculate risk level using inflation adjusted current monthly savings
            double riskLevelDiff = ((calcRetSavings - curSavingAmt) / curSavingAmt) * 100;
            return riskLevelDiff;
        }
    }
}
